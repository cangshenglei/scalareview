object yunsuanfu {

  //Scala运算符的使用和Java运算符的使用基本相同，只有个别细节上不同。
  /* ）基本语法
  运算符	运算	范例	结果
    +	正号	+3	3
  -	负号	b=4; -b	-4
  +	加	5+5	10
  -	减	6-4	2
  *	乘	3*4	12
  /	除	5/5	1
  %	取模(取余)	7%5	2
  +	字符串相加	“He”+”llo”	“Hello”*/


  /*运算符	运算                                                                          	范例	结果
    ==	相等于	4==3	false
  !=	不等于	4！=3	true
  <	小于	4<3	false
  >	大于	4>3	true
  <=	小于等于	4<=3	false
  >=	大于等于	4>=3	true*/

  def main(args: Array[String]): Unit = {

    // 测试：>、>=、<=、<、==、!=
    var a: Int = 2
    var b: Int = 1

    println(a > b) // true
    println(a >= b) // true
    println(a <= b) // false
    println(a < b) // false
    println("a==b" + (a == b)) // false
    println(a != b) // true


    //Java：
    //==比较两个变量本身的值，即两个对象在内存中的首地址；
    //	equals比较字符串中所包含的内容是否相同。
//Scala：==更加类似于Java中的equals，参照jd工具

    val s1 = "abc"

    val s2 = new String("abc")

    println(s1 == s2)
    println(s1.eq(s2))


   /* 基本语法
    用于连接多个条件（一般来讲就是关系表达式），最终的结果也是一个Boolean值。
    假定：变量A为true，B为false
    运算符	描述	实例
    &&	逻辑与	(A && B) 运算结果为 false
    ||	逻辑或	(A || B) 运算结果为 true
    !	逻辑非	!(A && B) 运算结果为 true*/
   // 测试：&&、||、!

  /* var a = true
    var b = false

    println("a&&b=" + (a && b))     // a&&b=false
    println("a||b=" + (a || b))     // a||b=true
    println("!(a&&b)=" + (!(a && b))) // !(a&&b)=true
  }
}

扩展避免逻辑与空指针异常
def isNotEmpty(String s){
  //如果按位与，s为空，会发生空指针
  return s!=null && !"".equals(s.trim());*/


 /*   赋值运算符
    1）基本语法
    赋值运算符就是将某个运算后的值，赋给指定的变量。
    运算符	描述	实例
      =	简单的赋值运算符，将一个表达式的值赋给一个左值	C = A + B 将 A + B 表达式结果赋值给 C
    +=	相加后再赋值	C += A 等于 C = C + A
    -=	相减后再赋值	C -= A 等于 C = C - A
    *=	相乘后再赋值	C *= A 等于 C = C * A
    /=	相除后再赋值	C /= A 等于 C = C / A
    %=	求余后再赋值	C %= A 等于 C = C % A
    <<=	左移后赋值	C <<= 2等于 C = C << 2
    >>=	右移后赋值	C >>= 2 等于 C = C >> 2
    &=	按位与后赋值	C &= 2  等于 C = C & 2
    ^=	按位异或后赋值	C ^= 2  等于 C = C ^ 2
    |=	按位或后赋值	C |= 2  等于 C = C | 2
    注意：Scala中没有++、--操作符，可以通过+=、-=来实现同样的效果；*/


   /* 基本语法
    下表中变量 a 为 60，b 为 13。
    运算符	描述	实例
    &	按位与运算符	(a & b) 输出结果 12 ，二进制解释： 0000 1100
    |	按位或运算符	(a | b) 输出结果 61 ，二进制解释： 0011 1101
    ^	按位异或运算符	(a ^ b) 输出结果 49 ，二进制解释： 0011 0001
    ~	按位取反运算符	(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。
    <<	左移动运算符	a << 2 输出结果 240 ，二进制解释： 0011 0000
    >>	右移动运算符	a >> 2 输出结果 15 ，二进制解释： 0000 1111
    >>>	无符号右移	a >>>2 输出结果 15, 二进制解释: 0000 1111*/

    // 测试：1000 << 1 =>10000
    var n1 :Int =8

    n1 = n1 << 1
    println(n1)


/*    6 Scala运算符本质
      在Scala中其实是没有运算符的，所有运算符都是方法。
    （1）当调用对象的方法时，点.可以省略
    （2）如果函数参数只有一个，或者没有参数，()可以省略*/
// 标准的加法运算
val i:Int =1.+(1)
    // （1）当调用对象的方法时，.可以省略
    val j:Int=1+(1)
    // （2）如果函数参数只有一个，或者没有参数，()可以省略
    val j1:Int =1+1

    println(1 .toString())
    println(1 toString())
    println(1 toString)















  }

}
























